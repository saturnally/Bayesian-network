# -*- coding: utf-8 -*-
"""Bayes Ağları.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12MtJhUgKnkwRlaAtypWMPcLg2feGcEN7
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Model Select
from sklearn.model_selection import KFold, train_test_split, cross_val_score
from sklearn.naive_bayes import GaussianNB
#Metrics
from sklearn.metrics import accuracy_score ,precision_score,recall_score,f1_score, confusion_matrix

import warnings
warnings.filterwarnings('ignore')

"""* Veri setini yükleme ve ilk 5 satırı ekrana getirme"""

cols = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']
df = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data", names=cols)
df.head()

"""* Veri kümesini bellekteki bir veri çerçevesine yükledikten sonra, bir sonraki adım keşifsel bir veri analizi yapmaktır. EDA'nın amacı, veri kümesi hakkında mümkün olduğunca fazla bilgi keşfetmektir. describe() metodu, veri kümesinin ortalama, standart sapma vb. istatistiklerini yazdırır.


"""

df.describe()

"""* Keşifsel veri analizinde çok önemli bir araç, veri kümesi hakkında fikir edinmemize yardımcı olan veri görselleşmesidir. Aşağıdaki grafik, veri kümesinin öznitelikleri arasındaki ilişkiyi göstermektedir."""

sns.pairplot(df, hue='class')

"""* Veri görselleştirmenin bir başka ilginç durumu, veri kümesinin korelasyon matrisini görselleştirmek için bir ısı haritası kullanmaktır.


"""

sns.heatmap(df.corr(), annot=True)

"""* Genellikle, veritabanlarından, dosyalardan veya internetten toplanan veri kümesi, bir makine öğrenimi algoritması tarafından işlenmeye hazır değildir. Çoğu durumda, veri kümesinin bir makine öğrenimi algoritmasına girdi olarak kullanılmadan önce bir tür hazırlığa veya ön işlemeye ihtiyacı vardır. Bu durumda kullanacağımız algoritma string değerlerini işlemediği için class kolonunun string değerlerini tam sayıya çeviriyoruz.

"""

df['class_encod'] = df['class'].apply(lambda x:0 if x=='Iris-setosa' else 1 if x == 'Iris-versicolor' else 2)
df['class_encod'].unique()

"""* Verilerimizi keşfedip ön işlemeden geçirdikten sonra, iris örneklerini sınıflandırmak için makine öğrenimi modelimizi oluşturabiliriz. Bu nedenle, ilk adım, dataframe'imizi girdi niteliklerine ve hedef niteliklere bölmektir."""

y = df[['class_encod']] # targer attributes
X = df.iloc[:, 0:4] # input attributes
X.head()

"""* Önceki adımda dataframe'i sütunları ayırarak böldüysek, bu adımda veriler satırlara ayırdık.
* train_test_split() metodu, eğitim verilerinde ve test verilerinde x ve y dataframelerini böler.
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0, stratify=y)

np.shape(y_train)

"""* Ardından sklearn tarafından sağlanan naive_bayes sınıfını kullanarak bir GaussianNB sınıflandırıcısı oluşturmak için X_train ve y_train veri kümelerini kullanırız. Makine öğrenimi algoritması zaten kitaplık tarafından uygulandığından, tek yapmamız gereken X_train ve y_train veri kümelerini argüman olarak ileterek fit() yöntemini çağırmak."""

gaussian = GaussianNB()
gaussian.fit(X_train, y_train)
Y_pred = gaussian.predict(X_test)
accuracy_nb = round(accuracy_score(y_test,Y_pred)*100, 2)
acc_gaussian = round(gaussian.score(X_train, y_train)*100, 2)

"""* Modelimizin başarısını görmek için confusion_matrix, accuracy, precision, recall ve f1_score değerlerini hesaplatıp yazdıralım."""

cm = confusion_matrix(y_test, Y_pred)
accuracy = accuracy_score(y_test, Y_pred)
precision = precision_score(y_test, Y_pred, average='micro')
recall = recall_score(y_test, Y_pred, average='micro')
f1 = f1_score(y_test, Y_pred, average='micro')
print('confusion matrix for Naive Bayes\n', cm)
print('accuracy of Naive Bayes: %.3f' %accuracy)
print('precision of Naive Bayes: %.3f' %precision)
print('recall of Naive Bayes: %.3f' %recall)
print('f1 score of Naive Bayes: %.3f' %f1)

